# =================================
# Hello World Express.js Application
# Environment Configuration Template
# =================================
#
# This file provides examples and documentation for all environment variables
# required by the Express.js application. Copy this file to .env and customize
# the values for your specific deployment environment.
#
# IMPORTANT: Never commit actual .env files to version control.
# This .env.example file should contain only example/placeholder values.

# =================================
# BASIC SERVER CONFIGURATION
# =================================

# Server port binding
# Development: Usually 3000 for local development
# Production: Often assigned by hosting platform (Heroku: PORT env var)
# Valid range: 1-65535 (recommend 1024-65535 for non-root users)
PORT=3000

# Host binding configuration  
# Development: 127.0.0.1 (localhost only - secure for development)
# Staging: 127.0.0.1 or 0.0.0.0 depending on access requirements
# Production: 0.0.0.0 (all interfaces - required for external access)
# Security note: localhost (127.0.0.1) prevents external network access
HOST=127.0.0.1

# Node.js environment identifier
# Controls middleware behavior, logging levels, and error handling
# Valid values: development, staging, production
# Development: Enhanced debugging, detailed errors, console logging
# Production: Optimized performance, sanitized errors, file logging
NODE_ENV=development

# =================================
# LOGGING CONFIGURATION
# =================================

# Winston logger level configuration
# Controls the granularity of application logs
# Valid levels (in order of verbosity):
#   - error: Only error messages (production recommended)
#   - warn: Warnings and errors
#   - info: General information, warnings, and errors  
#   - debug: Detailed debugging information (development only)
# Recommendation: 'info' for production, 'debug' for development
LOG_LEVEL=info

# Log file location (optional)
# Directory where Winston will write log files when using file transport
# Ensure the directory exists and is writable by the application
# Leave empty to use default './logs' directory
# LOG_DIR=./logs

# Log file retention days (optional)
# Number of days to retain rotated log files
# Helps manage disk space usage for production deployments
# Default: 14 days if not specified
# LOG_RETENTION_DAYS=14

# Console logging format (optional)
# Format for console output in development mode
# Options: 'simple', 'json', 'detailed'
# Default: 'simple' for development, 'json' for production
# CONSOLE_LOG_FORMAT=simple

# =================================
# CORS CONFIGURATION
# =================================

# Cross-Origin Resource Sharing allowed origins
# Comma-separated list of origins that can access the API
# Development: Usually localhost on various ports
# Production: Specific domains only for security
# Use * for development only - NEVER in production
# Example: http://localhost:3000,https://yourdomain.com
CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000

# CORS credentials policy
# Whether to allow credentials (cookies, authorization headers) in CORS requests
# Values: true, false
# Security note: Only set to true if you specifically need credential support
CORS_CREDENTIALS=false

# CORS allowed methods
# HTTP methods that are allowed for cross-origin requests
# Common methods: GET,POST,PUT,DELETE,PATCH,OPTIONS
CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS

# CORS allowed headers
# Headers that clients can send with cross-origin requests
# Common headers: Content-Type,Authorization,X-Requested-With
CORS_HEADERS=Content-Type,Authorization,X-Requested-With,Accept,Origin

# =================================
# RATE LIMITING CONFIGURATION
# =================================

# Rate limiting window duration (in minutes)
# Time window for rate limit calculations
# Example: 15 means "15 requests per 15 minutes"
# Recommended: 15 minutes for general APIs
RATE_LIMIT_WINDOW=15

# Maximum requests per window per IP
# Number of requests allowed from a single IP within the time window
# Development: Higher limits for testing (1000)
# Production: Lower limits for protection (100-500)
RATE_LIMIT_MAX=1000

# Rate limiting message
# Custom message shown when rate limit is exceeded
# Keep user-friendly and avoid exposing internal details
RATE_LIMIT_MESSAGE=Too many requests from this IP, please try again later.

# Skip rate limiting in development
# Whether to disable rate limiting entirely in development mode
# Values: true, false
# Useful for development/testing but should be false in production
RATE_LIMIT_SKIP_DEV=true

# =================================
# SECURITY CONFIGURATION
# =================================

# JSON Web Token (JWT) secret key
# CRITICAL: Use a strong, random secret in production
# Minimum 32 characters, include letters, numbers, and special characters
# Generate using: openssl rand -base64 32
# NEVER use the example value below in production
JWT_SECRET=your-super-secure-jwt-secret-key-change-this-in-production

# JWT token expiration
# How long JWT tokens remain valid
# Format: number + unit (s=seconds, m=minutes, h=hours, d=days)
# Examples: '1h', '7d', '30m'
# Shorter expiration is more secure but less convenient
JWT_EXPIRES_IN=24h

# Helmet security configuration
# Whether to enable Helmet security headers middleware
# Should always be true in production for security
HELMET_ENABLED=true

# Content Security Policy (CSP) configuration
# Whether to enable Content Security Policy headers
# Helps prevent XSS attacks but may require frontend configuration
# Set to false if CSP causes issues with frontend applications
CSP_ENABLED=true

# =================================
# DATABASE CONFIGURATION (Future Use)
# =================================
# These variables are prepared for future database integration
# Currently not used by the application but documented for expansion

# Primary database connection URL
# Format depends on database type:
# PostgreSQL: postgresql://username:password@host:port/database
# MongoDB: mongodb://username:password@host:port/database
# MySQL: mysql://username:password@host:port/database
# SQLite: sqlite://path/to/database.db
# DATABASE_URL=postgresql://username:password@localhost:5432/hello_world_db

# Database connection pool settings (optional)
# Maximum number of database connections in the pool
# Recommended: 10-20 for small applications, 20-100 for larger ones
# DB_POOL_SIZE=20

# Database connection timeout (milliseconds)
# How long to wait for database connection before timing out
# Recommended: 10000-30000ms (10-30 seconds)
# DB_CONNECTION_TIMEOUT=15000

# Enable database query logging
# Whether to log all database queries (useful for debugging)
# Values: true, false
# WARNING: Can be very verbose - use only in development
# DB_QUERY_LOGGING=false

# Database SSL configuration
# Whether to require SSL/TLS for database connections
# Values: true, false, require, prefer
# Production: should be true or require for security
# DB_SSL=true

# =================================
# EXTERNAL SERVICE CONFIGURATION
# =================================
# Configuration for future external service integrations

# Email service configuration (e.g., SendGrid, Mailgun)
# EMAIL_SERVICE_API_KEY=your-email-service-api-key
# EMAIL_FROM_ADDRESS=noreply@yourdomain.com
# EMAIL_FROM_NAME=Hello World App

# Redis cache configuration
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=your-redis-password

# Third-party API configuration
# API_BASE_URL=https://api.example.com/v1
# API_KEY=your-api-key
# API_TIMEOUT=5000

# =================================
# MONITORING & OBSERVABILITY
# =================================

# Health check endpoint configuration
# Whether to enable the /health endpoint
# Should be true for production monitoring
HEALTH_CHECK_ENABLED=true

# Detailed health check information
# Whether to include detailed system info in health check response
# Development: true (helpful for debugging)
# Production: false (security - don't expose internal details)
HEALTH_CHECK_DETAILED=false

# Morgan HTTP logging format
# Log format for HTTP requests
# Options: combined, common, dev, short, tiny
# Development: 'dev' (colored, concise)
# Production: 'combined' (standard Apache format)
MORGAN_FORMAT=dev

# Performance monitoring
# Whether to include response time headers
# Adds X-Response-Time header to all responses
PERFORMANCE_MONITORING=true

# =================================
# PM2 PROCESS MANAGEMENT
# =================================

# PM2 application name
# Name used to identify the application in PM2 process list
# Should be descriptive and unique if running multiple apps
PM2_APP_NAME=hello-world-express

# PM2 cluster instances
# Number of worker processes to run
# 0 or 'max': Use all available CPU cores
# Specific number: Use that many worker processes
# Recommended: 0 for production, 1 for development
PM2_INSTANCES=0

# PM2 memory limit per instance (MB)
# Restart worker if it exceeds this memory usage
# Helps prevent memory leaks from affecting the system
# Recommended: 100-512MB depending on application needs
PM2_MEMORY_LIMIT=100

# PM2 log management
# Whether to enable PM2's built-in log rotation
# Prevents log files from growing too large
PM2_LOG_ROTATION=true

# PM2 restart policy
# How to handle process restarts
# Options: always, on-failure, unless-stopped
# Recommended: always for production reliability
PM2_RESTART=always

# =================================
# DEVELOPMENT CONFIGURATION
# =================================

# Development server auto-restart
# Whether to use nodemon for automatic restart on file changes
# Only relevant when using npm run dev
# Values: true, false
DEV_AUTO_RESTART=true

# Development debug mode
# Enables additional debugging features in development
# Should be false in production for performance
DEV_DEBUG_MODE=true

# Development mock data
# Whether to enable mock/test data in development
# Useful for frontend development when backend is not ready
DEV_ENABLE_MOCKS=false

# =================================
# EXAMPLE ENVIRONMENT-SPECIFIC CONFIGURATIONS
# =================================

# Development Environment Example:
# NODE_ENV=development
# LOG_LEVEL=debug
# HOST=127.0.0.1
# PORT=3000
# CORS_ORIGINS=http://localhost:3000,http://localhost:3001
# RATE_LIMIT_SKIP_DEV=true
# HEALTH_CHECK_DETAILED=true
# MORGAN_FORMAT=dev

# Production Environment Example:
# NODE_ENV=production
# LOG_LEVEL=info
# HOST=0.0.0.0
# PORT=3000
# CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
# RATE_LIMIT_SKIP_DEV=false
# HEALTH_CHECK_DETAILED=false
# MORGAN_FORMAT=combined

# Staging Environment Example:
# NODE_ENV=staging
# LOG_LEVEL=info
# HOST=0.0.0.0
# PORT=3000
# CORS_ORIGINS=https://staging.yourdomain.com
# RATE_LIMIT_SKIP_DEV=false
# HEALTH_CHECK_DETAILED=true
# MORGAN_FORMAT=combined

# =================================
# SECURITY NOTES
# =================================
#
# 1. Never commit .env files to version control
#    - Add .env to your .gitignore file
#    - Use .env.example for documentation only
#
# 2. Use strong, unique values for all secrets
#    - JWT_SECRET should be at least 32 random characters
#    - Generate secrets using: openssl rand -base64 32
#
# 3. Validate all environment variables at startup
#    - Check required variables exist
#    - Validate formats (URLs, numbers, etc.)
#    - Fail fast if configuration is invalid
#
# 4. Use different values across environments
#    - Development, staging, and production should have different secrets
#    - Database URLs should point to appropriate environments
#
# 5. Restrict access to production .env files
#    - Use proper file permissions (600 or 644)
#    - Store production secrets in secure secret management systems
#
# 6. Regular security reviews
#    - Rotate secrets periodically
#    - Review and update CORS origins
#    - Monitor rate limiting effectiveness
#
# =================================
# TROUBLESHOOTING
# =================================
#
# Common issues and solutions:
#
# 1. "Port already in use" error:
#    - Change PORT to a different value (e.g., 3001, 8000)
#    - Check what's using the port: lsof -i :3000 (macOS/Linux)
#
# 2. CORS errors in browser:
#    - Add your frontend URL to CORS_ORIGINS
#    - Check that CORS_METHODS includes the HTTP method you're using
#
# 3. Rate limiting blocking requests:
#    - Increase RATE_LIMIT_MAX for development
#    - Set RATE_LIMIT_SKIP_DEV=true for development
#
# 4. JWT authentication issues:
#    - Ensure JWT_SECRET is properly set and consistent
#    - Check JWT_EXPIRES_IN format (e.g., '1h', '7d')
#
# 5. Logging issues:
#    - Verify LOG_DIR exists and is writable
#    - Check LOG_LEVEL is set to appropriate verbosity
#
# For more help, see the README.md file or project documentation.